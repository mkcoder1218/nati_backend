-- Schema export generated by export-database-js.js

-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Enum types (using DO blocks to handle existing types)
DO $$ BEGIN
    CREATE TYPE entity_type AS ENUM ('review', 'office', 'service', 'user', 'comment');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE language_type AS ENUM ('amharic', 'english');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE notification_type AS ENUM ('info', 'warning', 'success', 'error');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE office_type AS ENUM ('kebele', 'woreda', 'municipal', 'regional', 'federal');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE office_vote_type AS ENUM ('upvote', 'downvote');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE review_status AS ENUM ('pending', 'approved', 'flagged', 'removed');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE sentiment_type AS ENUM ('positive', 'negative', 'neutral');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE user_role AS ENUM ('citizen', 'official', 'admin');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE vote_type AS ENUM ('helpful', 'not_helpful', 'flag');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

-- Create Users table first (no dependencies)
CREATE TABLE IF NOT EXISTS users (
  user_id UUID NOT NULL DEFAULT uuid_generate_v4(),
  email VARCHAR(255) UNIQUE NOT NULL,
  password VARCHAR(255) NOT NULL,
  role user_role NOT NULL DEFAULT 'citizen'::user_role,
  full_name VARCHAR(255) NOT NULL,
  phone_number VARCHAR(20),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  last_login TIMESTAMP WITH TIME ZONE,
  PRIMARY KEY (user_id)
);

-- Create Offices table (self-referencing, but can handle NULL parent_office_id)
CREATE TABLE IF NOT EXISTS offices (
  office_id UUID NOT NULL DEFAULT uuid_generate_v4(),
  name VARCHAR(255) NOT NULL,
  type office_type NOT NULL,
  latitude NUMERIC,
  longitude NUMERIC,
  address VARCHAR(255) NOT NULL,
  contact_info VARCHAR(255) NOT NULL,
  operating_hours VARCHAR(255) NOT NULL,
  parent_office_id UUID,
  upvote_count INTEGER DEFAULT 0,
  downvote_count INTEGER DEFAULT 0,
  PRIMARY KEY (office_id),
  FOREIGN KEY (parent_office_id) REFERENCES offices(office_id) ON DELETE SET NULL
);

-- Create Reviews table (depends on users and offices)
CREATE TABLE IF NOT EXISTS reviews (
  review_id UUID NOT NULL DEFAULT uuid_generate_v4(),
  user_id UUID,
  office_id UUID NOT NULL,
  rating INTEGER NOT NULL CHECK (rating >= 1 AND rating <= 5),
  comment TEXT,
  is_anonymous BOOLEAN NOT NULL DEFAULT false,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  status review_status NOT NULL DEFAULT 'pending'::review_status,
  PRIMARY KEY (review_id),
  FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE SET NULL,
  FOREIGN KEY (office_id) REFERENCES offices(office_id) ON DELETE CASCADE
);

-- Create Comments table (depends on users)
CREATE TABLE IF NOT EXISTS comments (
  comment_id UUID NOT NULL DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL,
  content TEXT NOT NULL,
  status VARCHAR(20) NOT NULL DEFAULT 'pending'::character varying,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  PRIMARY KEY (comment_id),
  FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

-- Create Office Votes table (depends on users and offices)
CREATE TABLE IF NOT EXISTS office_votes (
  vote_id UUID NOT NULL DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL,
  office_id UUID NOT NULL,
  vote_type office_vote_type NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (vote_id),
  FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
  FOREIGN KEY (office_id) REFERENCES offices(office_id) ON DELETE CASCADE,
  UNIQUE (user_id, office_id)
);

-- Create Sentiment Logs table (depends on reviews)
CREATE TABLE IF NOT EXISTS sentiment_logs (
  log_id UUID NOT NULL DEFAULT uuid_generate_v4(),
  review_id UUID NOT NULL,
  sentiment sentiment_type NOT NULL,
  category VARCHAR(100),
  confidence_score NUMERIC NOT NULL,
  processed_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  language language_type NOT NULL,
  PRIMARY KEY (log_id),
  FOREIGN KEY (review_id) REFERENCES reviews(review_id) ON DELETE CASCADE
);

-- Create Service Guides table (depends on offices)
CREATE TABLE IF NOT EXISTS service_guides (
  guide_id UUID NOT NULL DEFAULT uuid_generate_v4(),
  office_id UUID NOT NULL,
  title VARCHAR(255) NOT NULL,
  content TEXT NOT NULL,
  language language_type NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (guide_id),
  FOREIGN KEY (office_id) REFERENCES offices(office_id) ON DELETE CASCADE
);

-- Create Votes table (depends on users and reviews)
CREATE TABLE IF NOT EXISTS votes (
  vote_id UUID NOT NULL DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL,
  review_id UUID NOT NULL,
  vote_type vote_type NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (vote_id),
  FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
  FOREIGN KEY (review_id) REFERENCES reviews(review_id) ON DELETE CASCADE,
  UNIQUE (user_id, review_id)
);

-- Create Notifications table (depends on users)
CREATE TABLE IF NOT EXISTS notifications (
  notification_id UUID NOT NULL DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL,
  title VARCHAR(255) NOT NULL,
  message TEXT NOT NULL,
  type notification_type NOT NULL DEFAULT 'info',
  related_entity_type entity_type,
  related_entity_id UUID,
  is_read BOOLEAN NOT NULL DEFAULT FALSE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (notification_id),
  FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

